def greedy_job_scheduling(jobs):
    # Sort jobs by their deadline in ascending order, and for equal deadlines, sort by profits in descending order.
    jobs.sort(key=lambda x: (x[2], -x[3], x[1]))

    n = len(jobs)
    result = [False] * n
    job_sequence = [None] * n

    # Iterate over the jobs in forward order, starting from the job with the earliest deadline.
    for i in range(n):
        # Find the first available time slot for the current job.
        for j in range(min(n, jobs[i][2]) - 1, -1, -1):
            if not result[j]:
                result[j] = True
                job_sequence[j] = jobs[i]
                break

    # Return the list of scheduled jobs.
    return [job for job in job_sequence if job is not None]

# Main
jobs = [("Job1", 1, 3, 5),
        ("Job2", 1, 4, 7),
        ("Job3", 2, 2, 3),
        ("Job4", 3, 3, 8)]

scheduled_jobs = greedy_job_scheduling(jobs)
print("Scheduled Jobs:")
for job in scheduled_jobs:
    print(f"{job[0]} (Deadline: {job[2]}, Profits: {job[3]})")
