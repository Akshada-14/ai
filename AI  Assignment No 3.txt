class Node:
    def __init__(self, value, children=None):
        self.value = value
        self.children = children if children else []

    def is_terminal(self):
        return not self.children

    def generate_children(self):
        return self.children

def create_game_tree():
    num_nodes = int(input("Enter the number of nodes: "))
    nodes = []
    for i in range(num_nodes):
        value = int(input(f"Enter the value for node {i + 1}: "))
        nodes.append(Node(value))

    for i in range(num_nodes):
        children_indices = input(f"Enter children indices for node {i + 1} (space-separated, 0-based): ")
        children = [nodes[int(idx)] for idx in children_indices.split()]
        nodes[i].children = children

    return nodes[0]  # Return the root of the tree

def minimax_alpha_beta(node, depth, alpha, beta, maximizingPlayer):
    if depth == 0 or node.is_terminal():
        return node.value

    if maximizingPlayer:
        max_eval = float("-inf")
        for child in node.generate_children():
            eval = minimax_alpha_beta(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = float("inf")
        for child in node.generate_children():
            eval = minimax_alpha_beta(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

if __name__ == "__main__":
    root = create_game_tree()

    # Set the initial alpha and beta values
    alpha = float("-inf")
    beta = float("inf")

    # Set the desired depth for the search
    max_depth = int(input("Enter the maximum depth: "))

    result = minimax_alpha_beta(root, max_depth, alpha, beta, True)
    print("Optimal value:", result)

